cmake_minimum_required(VERSION 3.15)
project(ikfast_solver CXX)

# Explicitly set the C++ standard for the project.
# pybind11 requires at least C++11, but C++17 is a good modern default.
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find the pybind11 package, which is a build dependency.
# The build system (scikit-build-core) ensures it's available.
find_package(pybind11 CONFIG REQUIRED)

# This is the C++ source file generated by OpenRAVE for the specific robot.
set(IKFAST_GENERATED_SOURCE "ikfast_solver.cpp")

# This creates our Python module, named "ikfast_pybind".
# It's compiled from our wrapper code and the generated IKFast solver code.
pybind11_add_module(ikfast_pybind ik_wrapper.cpp ${IKFAST_GENERATED_SOURCE})

# This is the crucial step that links our module against pybind11.
# It ensures our module gets the correct include directories and compiler flags.
target_link_libraries(ikfast_pybind PRIVATE pybind11::module)

# This is the crucial final step: install the compiled Python module.
# The DESTINATION must match the Python package name. This ensures that
# scikit-build-core places the compiled .so file inside the package directory,
# making it importable.
install(TARGETS ikfast_pybind DESTINATION ikfast_solver) 